@model Wanderlust.ViewModel.DestinationDetailsViewModel

@{
    ViewBag.Title = "Destination Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions {
    string GetRatingTitle(int rating)
    {
        switch (rating)
        {
            case 1: return "Poor";
            case 2: return "Fair";
            case 3: return "Good";
            case 4: return "Very Good";
            case 5: return "Excellent";
            default: return "Rate this";
        }
    }
}

<div class="container py-4">
    <div class="row mb-3">
        <div class="col-12">
            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Destinations
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Left Side: Destination Details -->
        <div class="col-lg-8 mb-4">
            <div class="destination-image-container">
                <img src="~/@Model.Destination.image" alt="@Model.Destination.destName" class="destination-image" />
                <div class="destination-name-overlay">
                    <h2 class="mb-0">@Model.Destination.destName</h2>
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h4>About this destination</h4>
                    <p class="lead">@Model.Destination.description</p>

                    <div class="d-flex align-items-center justify-content-between mt-4">
                        <button type="submit" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#itineraryModal">
                            <i class="bi bi-plus-circle"></i> Add to Itinerary
                        </button>

                        @if (Session["UserID"] != null)
                        {
                            <button type="button" class="btn btn-outline-danger add-to-wishlist"
                                    data-id="@Model.Destination.dest_id"
                                    data-url="@Url.Action("AddToWishlist", "Wishlist", new { id = Model.Destination.dest_id })"
                                    title="Add to Wishlist">
                                <i class="bi bi-heart"></i> Add to Wishlist
                            </button>
                        }
                    </div>
                </div>
            </div>

            <!-- REVIEW SECTION START -->
            <div class="review-container">
                <h3 class="mb-4">Reviews <span class="badge bg-secondary">@Model.Reviews.Count</span></h3>

                @if (Model.Reviews != null && Model.Reviews.Any())
                {
                    <!-- Rating Summary Section -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="star-rating-summary">
                                <div class="average-rating">
                                    @{
                                        var avgRating = Model.Reviews.Average(r => r.rating);
                                    }
                                    @avgRating.ToString("F1")
                                </div>
                                <div class="star-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Round(avgRating))
                                        {
                                            <i class="bi bi-star-fill"></i>
                                        }
                                        else if (i - 0.5 <= avgRating)
                                        {
                                            <i class="bi bi-star-half"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star"></i>
                                        }
                                    }
                                </div>
                                <div class="ms-2">(@Model.Reviews.Count reviews)</div>
                            </div>

                            <div class="rating-bars">
                                @for (int i = 5; i >= 1; i--)
                                {
                                    var count = Model.Reviews.Count(r => r.rating == i);
                                    var percentage = Model.Reviews.Any() ? (count * 100.0 / Model.Reviews.Count) : 0;

                                    <div class="rating-bar-container">
                                        <div class="rating-label">@i <i class="bi bi-star-fill" style="font-size: 0.8rem;"></i></div>
                                        <div class="rating-bar">
                                            <div class="rating-bar-fill" style="width: @percentage%"></div>
                                        </div>
                                        <div class="rating-count">@count</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle me-2"></i> @TempData["SuccessMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i> @TempData["ErrorMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                @if (Session["UserId"] != null)
                {
                    // Check if user already reviewed this destination
                    bool userAlreadyReviewed = Model.Reviews != null && Model.Reviews.Any(r => r.user_id == Convert.ToInt32(Session["UserId"]));

                    if (!userAlreadyReviewed)
                    {
                        <div class="review-form mb-4">
                            <h4>Write a Review</h4>
                            @using (Html.BeginForm("Add", "Review", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                            {
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="dest_id" value="@Model.Destination.dest_id" />
                                <div class="mb-3">
                                    <label class="form-label">Rating</label>
                                    <div class="rating-input">
                                        @for (int i = 5; i >= 1; i--)
                                        {
                                            <input type="radio" id="star@i" name="rating" value="@i" required />
                                            <label for="star@i" title="@GetRatingTitle(i)">
                                                <i class="bi bi-star-fill"></i>
                                            </label>
                                        }
                                    </div>
                                    <div class="rating-feedback" id="ratingFeedback">Click on a star to rate</div>
                                    <div class="invalid-feedback">Please select a rating</div>
                                </div>
                                <div class="mb-3">
                                    <label for="content" class="form-label">Your Review</label>
                                    <textarea class="form-control review-content" id="content" name="content" rows="4" required
                                              minlength="10" maxlength="1000"></textarea>
                                    <div class="character-counter"><span id="charCount">0</span>/1000 characters</div>
                                    <div class="invalid-feedback">Please write a review (minimum 10 characters)</div>
                                </div>
                                <button type="submit" class="btn btn-primary">Submit Review</button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-4">
                            <i class="bi bi-info-circle-fill me-2"></i>
                            You have already reviewed this destination. You can edit or delete your review below.
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info mb-4">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Please <a href="@Url.Action("Login", "Account")">login</a> to write a review.
                    </div>
                }

                <!-- Reviews List -->
                <div class="reviews-list">
                    @if (Model.Reviews != null && Model.Reviews.Any())
                    {
                        <div class="review-filters mb-3">
                            <button class="review-filter-btn active" data-filter="all">All Reviews</button>
                            @for (int i = 5; i >= 1; i--)
                            {
                                if (Model.Reviews.Any(r => r.rating == i))
                                {
                                    <button class="review-filter-btn" data-filter="@i">
                                        @i <i class="bi bi-star-fill" style="font-size: 0.8rem;"></i>
                                    </button>
                                }
                            }
                        </div>

                        foreach (var review in Model.Reviews.OrderByDescending(r => r.review_date))
                        {
                            bool isUserReview = Session["UserId"] != null && review.user_id == Convert.ToInt32(Session["UserId"]);

                            <div class="card review-card mb-3 @(isUserReview ? "border-primary" : "")" data-rating="@review.rating">
                                <div class="card-body">
                                    <div class="review-header mb-2">
                                        <div>
                                            <h5 class="mb-0">
                                                @review.USER.firstName @(isUserReview ? "(You)" : "")
                                            </h5>
                                            <div class="star-rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= review.rating)
                                                    {
                                                        <i class="bi bi-star-fill"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-star"></i>
                                                    }
                                                }
                                            </div>
                                        </div>

                                        @if (isUserReview)
                                        {
                                            <div class="review-actions">
                                                <a href="@Url.Action("Edit", "Review", new { id = review.review_id })" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <a href="#" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal@(review.review_id)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </a>

                                                <!-- Delete Modal -->
                                                <div class="modal fade" id="deleteModal@(review.review_id)" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                                                    <div class="modal-dialog">
                                                        <div class="modal-content">
                                                            <div class="modal-header">
                                                                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                            </div>
                                                            <div class="modal-body">
                                                                Are you sure you want to delete this review?
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                                @using (Html.BeginForm("Delete", "Review", FormMethod.Post, new { @class = "d-inline" }))
                                                                {
                                                                    @Html.AntiForgeryToken()
                                                                    <input type="hidden" name="id" value="@review.review_id" />
                                                                    <button type="submit" class="btn btn-danger">Delete</button>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <p class="card-text">@review.content</p>
                                    <p class="review-date mb-0">
                                        <i class="bi bi-calendar3"></i> @review.review_date.ToString("MMMM dd, yyyy")
                                    </p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-reviews-container">
                            <i class="bi bi-chat-square-text no-reviews-icon"></i>
                            <p class="mb-2">No reviews yet. Be the first to review this destination!</p>
                            @if (Session["UserId"] == null)
                            {
                                <a href="@Url.Action("Login", "Account")" class="btn btn-outline-primary">
                                    <i class="bi bi-box-arrow-in-right"></i> Login to Write a Review
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>
            <!-- REVIEW SECTION END -->
        </div>

        <!-- Sidebar Column -->
        <div class="col-lg-4">
            <!-- Booking Card -->
            <div class="card shadow mb-4 position-sticky" style="top: 2rem;">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Book This Package</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Base Price:</span>
                            <span class="fw-bold">$@Model.Destination.price</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <span>Per Person</span>
                            <span class="text-muted">(includes all taxes)</span>
                        </div>
                    </div>

                    <hr>

                    <form id="bookingForm" method="post" action="@Url.Action("CreateBooking", "Booking")">
                        @Html.AntiForgeryToken()

                        <input type="hidden" name="bk_type" value="dest" />
                        <input type="hidden" name="trip_id" value="@Model.Destination.dest_id" />
                        <input type="hidden" name="price_per_person" value="@Model.Destination.price" />

                        <div class="mb-3">
                            @Html.LabelFor(m => m.travel_start_date, new { @class = "form-label fw-semibold" })
                            @Html.TextBoxFor(m => m.travel_start_date, new
                            {
                                @class = "form-control",
                                @type = "date",
                                @required = "required",
                                @min = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")
                            })
                            @Html.ValidationMessageFor(m => m.travel_start_date, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.travel_end_date, new { @class = "form-label fw-semibold" })
                            @Html.TextBoxFor(m => m.travel_end_date, new
                            {
                                @class = "form-control",
                                @type = "date",
                                @required = "required",
                                @min = DateTime.Now.AddDays(2).ToString("yyyy-MM-dd")
                            })
                            @Html.ValidationMessageFor(m => m.travel_end_date, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.numtravelers, new { @class = "form-label fw-semibold" })
                            <div class="input-group">
                                <button type="button" class="btn btn-outline-secondary" id="decreaseBtn"><i class="bi bi-dash"></i></button>
                                @Html.TextBoxFor(m => m.numtravelers, new
                                {
                                    @class = "form-control text-center",
                                    @value = "1",
                                    @min = "1",
                                    @max = "10",
                                    @required = "required"
                                })
                                <button type="button" class="btn btn-outline-secondary" id="increaseBtn"><i class="bi bi-plus"></i></button>
                            </div>
                            @Html.ValidationMessageFor(m => m.numtravelers, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(m => m.bk_cost, new { @class = "form-label fw-semibold" })
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                @Html.TextBoxFor(m => m.bk_cost, new
                                {
                                    @class = "form-control",
                                    @readonly = "readonly"
                                })
                            </div>
                            @Html.ValidationMessageFor(m => m.bk_cost, "", new { @class = "text-danger" })
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-autumn rounded-pill fw-bold">Book Now</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer bg-light">
                    <div class="small text-muted">
                        <i class="bi bi-info-circle me-1"></i> A 20% deposit is required to confirm your booking. The remaining balance is due 30 days before departure.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Itinerary Modal -->
<div class="modal fade" id="itineraryModal" tabindex="-1" aria-labelledby="itineraryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" action="@Url.Action("AddToItinerary", "Itinerary")" class="modal-content">
            @Html.AntiForgeryToken()
            <input type="hidden" name="id" value="@Model.Destination.dest_id" />

            <div class="modal-header">
                <h5 class="modal-title" id="itineraryModalLabel">Select Itinerary</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>Select Existing Itinerary</label>
                    <select name="itineraryId" id="existingItineraries" class="form-select">
                        <option value="">-- Create New --</option>
                    </select>
                </div>
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const travelStartDate = document.getElementById('travel_start_date');
            const travelEndDate = document.getElementById('travel_end_date');
            const numTravelersInput = document.getElementById('numtravelers');
            const decreaseBtn = document.getElementById('decreaseBtn');
            const increaseBtn = document.getElementById('increaseBtn');
            const bookingCostInput = document.getElementById('bk_cost');
            const pricePerPerson = parseFloat('@Model.Destination.price');
            const contentTextarea = document.querySelector('.review-content');
            const charCountDisplay = document.getElementById('charCount');
            const ratingFeedback = document.getElementById('ratingFeedback');
            const filterButtons = document.querySelectorAll('.review-filter-btn');
            const reviewCards = document.querySelectorAll('.review-card');
            const ratingInputs = document.querySelectorAll('.rating-input input');

            // Calculate total cost
            function calculateTotalCost() {
                const numTravelers = parseInt(numTravelersInput.value) || 1;
                const totalCost = pricePerPerson * numTravelers;
                bookingCostInput.value = totalCost.toFixed(2);
                return totalCost;
            }

            // Event listeners for booking form
            travelStartDate.addEventListener('change', function() {
                const startValue = travelStartDate.value;
                if (startValue) {
                    const nextDay = new Date(startValue);
                    nextDay.setDate(nextDay.getDate() + 1);
                    travelEndDate.min = nextDay.toISOString().split('T')[0];

                    if (travelEndDate.value && new Date(travelEndDate.value) <= new Date(startValue)) {
                        travelEndDate.value = nextDay.toISOString().split('T')[0];
                    }
                }
                calculateTotalCost();
            });

            travelEndDate.addEventListener('change', calculateTotalCost);

            numTravelersInput.addEventListener('change', function() {
                this.value = Math.max(1, Math.min(10, parseInt(this.value) || 1));
                calculateTotalCost();
            });

            decreaseBtn.addEventListener('click', function() {
                const currentValue = parseInt(numTravelersInput.value) || 1;
                if (currentValue > 1) {
                    numTravelersInput.value = currentValue - 1;
                    calculateTotalCost();
                }
            });

            increaseBtn.addEventListener('click', function() {
                const currentValue = parseInt(numTravelersInput.value) || 1;
                if (currentValue < 10) {
                    numTravelersInput.value = currentValue + 1;
                    calculateTotalCost();
                }
            });

            // Initialize booking form
            if (!travelStartDate.value) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                travelStartDate.value = tomorrow.toISOString().split('T')[0];

                const endDefault = new Date();
                endDefault.setDate(endDefault.getDate() + 8);
                travelEndDate.value = endDefault.toISOString().split('T')[0];

                calculateTotalCost();
            }

            // Character counter for review content
            if (contentTextarea && charCountDisplay) {
                contentTextarea.addEventListener('input', function () {
                    const currentLength = this.value.length;
                    charCountDisplay.textContent = currentLength;

                    const charCounter = this.nextElementSibling;
                    if (currentLength > 800) {
                        charCounter.className = 'character-counter danger';
                    } else if (currentLength > 500) {
                        charCounter.className = 'character-counter warning';
                    } else {
                        charCounter.className = 'character-counter';
                    }
                });
            }

            // Rating selection feedback
            ratingInputs.forEach(input => {
                input.addEventListener('change', function() {
                    const ratingTitles = {
                        1: "Poor",
                        2: "Fair",
                        3: "Good",
                        4: "Very Good",
                        5: "Excellent"
                    };
                    if (ratingFeedback) {
                        ratingFeedback.textContent = `You selected: ${ratingTitles[this.value]}`;
                    }
                });
            });

            // Filter reviews by rating
            filterButtons.forEach(button => {
                button.addEventListener('click', function () {
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    const filter = this.getAttribute('data-filter');

                    reviewCards.forEach(card => {
                        card.style.display = (filter === 'all' || card.getAttribute('data-rating') === filter)
                            ? 'block' : 'none';
                    });
                });
            });

            // Form validation
            const reviewForm = document.querySelector('.needs-validation');
            if (reviewForm) {
                reviewForm.addEventListener('submit', function (event) {
                    if (!this.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    this.classList.add('was-validated');
                }, false);
            }

            // Itinerary modal
            $('#itineraryModal').on('show.bs.modal', function () {
                $.getJSON('@Url.Action("GetUserItineraries", "Itinerary")', function (data) {
                    const select = $('#existingItineraries');
                    select.empty();
                    select.append(`<option value="">-- Create New --</option>`);
                    data.forEach(function (item) {
                        select.append(`<option value="${item.itinerary_id}">${item.itinerary_name}</option>`);
                    });
                });
            });
        });
    </script>
}